name: Terragrunt AWS Execute
description: "Authenticates to AWS then invokes terragrunt"
inputs:
  PIPELINES_READ_TOKEN:
    description: "The PIPELINES_READ_TOKEN secret"
    required: true
  working_directory:
    description: ""
    required: true
  account_id:
    description: ""
    required: true
  account_role_name:
    description: ""
    required: true
  role_session_name:
    description: ""
    required: true
  gruntwork_context:
    description: ""
    required: true


outputs:
  execute_stdout:
    description: "The output of the Pipelines Execute command"
    value: ${{ steps.execute.outputs.execute_output }}
  plan_folder:
    description: "A folder with plan files (if any)"
    value: ${{ steps.execute.outputs.plan_folder }}

runs:
  using: composite
  steps:
    - name: "Read in Gruntwork context"
      id: gruntwork_context
      uses: gruntwork-io-team/pipelines-bootstrap@main
      with:
        cache: ${{ inputs.gruntwork_context }}

    # TODO: Make this whole thing something pipelines does.
    # This step will determine the region to authenticate with in STS for role assumption.
    # Note that this is different than the region where resources will be provisioned.
    # The relevant `region.hcl` file that determines where relevant resources are located can generally be found
    # in one of two locations:
    # 1. For `run-all` commands, the `region.hcl` file will be at `account-name`/_global/region.hcl
    # 2. For `plan` or `apply` commands, there's a `region.hcl` file above a given `terragrunt.hcl` file that indicates
    #   the region a given terragrunt file should run in.
    # 3. As a default, the region found in the account request file will be used, if found in `pipelines-bootstrap`.
    # This step will check in both locations
    - name: Determine Region
      shell: bash
      id: region
      env:
        WORKDIR: ${{ inputs.working_directory }}
        DEFAULT_REGION: ${{ steps.gruntwork_context.outputs.default_aws_region }}
      run: |
        set -euo pipefail

        if [[ -f $WORKDIR/_global/region.hcl ]]; then
          region="$(grep 'aws_region' < "$WORKDIR/_global/region.hcl" | awk '{print $3}' | tr -d '"')"
          echo "region=$region" >> $GITHUB_OUTPUT
          exit 0
        fi

        cur_dir="$WORKDIR"

        while [[ $cur_dir != '.' ]] && [[ $cur_dir != '/' ]] && cur_dir=$(dirname $cur_dir); do
          if [[ -f $cur_dir/region.hcl ]]; then
            region="$(grep 'aws_region' < "$cur_dir/region.hcl" | awk '{print $3}' | tr -d '"')"
            echo "region=$region" >> $GITHUB_OUTPUT
            exit 0
          fi
        done

        echo "region=$DEFAULT_REGION" >> $GITHUB_OUTPUT

    - name: Authenticate to AWS
      id: aws_auth
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ steps.region.outputs.region }}
        role-to-assume: "arn:aws:iam::${{ inputs.account_id }}:role/${{ inputs.account_role_name }}"
        role-duration-seconds: 3600
        role-session-name: ${{ inputs.role_session_name }}

    - name: "Get Auth Failure Reason"
      shell: bash
      id: auth_failure_reason
      if: ${{ failure() }}
      env:
        ACCOUNT_ID: ${{ inputs.account_id }}
        ACCOUNT_ROLE_NAME: ${{ inputs.account_role_name }}
      run: |
        # if the role_name begins with 'delegate' the role may not have been created yet
        if [[ $ACCOUNT_ROLE_NAME == delegate* ]]; then
          reason="Failed to authenticate to AWS. The role($ACCOUNT_ROLE_NAME) may not have been created yet. Contact your account administrator to ensure that access-control Pull Request for this account($ACCOUNT_ID) has been merged."
        else
          reason="Failed to authenticate to AWS. Verify that the role($ACCOUNT_ROLE_NAME) and account ID($ACCOUNT_ID) are correct."
        fi

        echo "auth_failure_reason=$reason" >> $GITHUB_OUTPUT

    - name: "Add Auth Failure Notice if AWS Auth Fails"
      uses: gruntwork-io/pipelines-status-update@main
      if: ${{ failure() }}
      with:
        step_name: "AWS Authentication"
        step_status: "failed"
        step_details: ${{ steps.auth_failure_reason.outputs.auth_failure_reason }}
        pull_request_number: ${{ steps.gruntwork_context.outputs.pr_number }}

    - name: "[Terragrunt Execute] Confirm Account Access"
      if: ${{ steps.aws_auth.outcome == 'success' }}
      shell: bash
      env:
        ACCOUNT: ${{ inputs.account_id }}
        WORKING_DIRECTORY: ${{ inputs.working_directory }}
      run: echo "::notice ::Running in account $ACCOUNT and planning in $WORKING_DIRECTORY"

    - name: "[Terragrunt Execute] Run terragrunt ${{ inputs.terragrunt_command }} in ${{ inputs.working_directory }}"
      if: ${{ steps.aws_auth.outcome == 'success' }}
      id: execute
      uses: gruntwork-io/pipelines-execute@v3.0.0-beta5
      with:
        token: ${{ inputs.PIPELINES_READ_TOKEN }}
        tf_binary: ${{ steps.gruntwork_context.outputs.tf_binary }}
        working_directory: ${{ inputs.working_directory }}
        pipelines_cli_version: ${{ steps.gruntwork_context.outputs.pipelines_cli_version }}
        terragrunt_command: ${{ steps.gruntwork_context.outputs.terragrunt_command }}
        infra_live_repo_branch: ${{ steps.gruntwork_context.outputs.branch }}
        gruntwork_config_file: "${{ steps.gruntwork_context.outputs.gruntwork_config_file }}"
        infra_live_repo: "."
        infra_live_directory: "."
        deploy_branch_name: ${{ steps.gruntwork_context.outputs.deploy_branch_name }}
